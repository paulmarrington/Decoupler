//- Copyright 2019 (C) paul@marrington.net http://www.askowl.net/unity-packages
//- The Askowl Decoupler provides wizards to do the bulk of the preparation for a new type of service.
//- Step one is design. This involves recording the data needed and data returned for each entry point for a service. Since this information is provided by the concrete services you intend to use, the only creative effort is to evaluate the differences between concrete entry points to provide a common interface.
//- For step two we use the wizard to create the service framework. Choose the parent folder in the project view and right-click for the context menu. [[Create // Decoupled // New Service]]
//- The new service will be created in a folder of the same name as we type here. We are going to use Adze again as it is a real service to decouple advertising providers.
//- The context is a list of objects that are used to decide if a particular concrete service is suitable for the running environment. For Adze we assume that we need different providers for the platform (web, Android, iOS, etc). In practice Android and iOS will use the same code but different authentication information. We also make Mode a context check since some providers may not have banner advertisements, for example. As to format, either use a single type for one instances or a list of type/name pairs for more data in a tuple. They all need to implement Equals for context checking to work.
//- For Adze we only need one entry point - to show an advertisement. No request data is needed so we will leave that empty. The response will be a tuple where addActionTaken is set if the player clicks through to the advertisement, dismissed is set if they choose not to watch and serviceError will be a non-null string if an error occurs.
//- Pressing the create button generates the necessary c# scripts to support this service. It also creates a Services Managers game object in your hierarchy and adds this services manager.
//- As you can see, six scripts are generated. Don't worry, most do not require any more work on your part.
//- Note that we also have an error in the console. This is because we specified a context entry called Mode and no such type currently exists. Double-click on the error and the offending code will load in your IDE. We can add the one line defining Mode and all is good again. [[public enum Mode { Banner, Interstitial, Reward }]]
//- If there are more errors then you may need to add an assembly definition file.
//- Once all errors are resolved we are ready to build the basic set of custom assets. [[Create // Decoupled // Build Assets]] If we now look in the project view we see four basic assets. These could have been generated manually from the Decoupled // Adze menu.
//- Now we need to start adding implementation code to the scripts. We have already added the service validation data to context from the wizard. Context means more than that. it also holds data needed by a specific concrete instance. Let's add those now [[[SerializeField] public string key/signature/location=default]]
//- We are going to put the cart before the horse by writing code to implement what happens when we receive a response. Edit AdzeServiceAdapter and look for OnResponse.
//- The first concrete service has been added for you. It is called AdzeServiceForMock. It writes to the log on request and response, so you can now write your first integrity test. I think I will leave that to another video.
//- For creating a concrete service interface I will use Chartboost. Again this is a large enough demonstration to deserve it's own video.
